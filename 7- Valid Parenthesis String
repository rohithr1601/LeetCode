Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.

The following rules define a valid string:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "(*)"
Output: true
Example 3:

Input: s = "(*))"
Output: true
 

Constraints:

1 <= s.length <= 100
s[i] is '(', ')' or '*'.


++++++++++++++++++++++++++++++++++
class Solution {
    public boolean checkValidString(String s) {
        int l =0, h=0;
        for(char c: s.toCharArray())
        {
            if(c=='(')
            {
                l++;
                h++;
            }
            else if(c==')')
            {
                l--;
                h--;
            }
            else
            {
                l--;
                h++;
            }
            if(l < 0)
            {
                l=0;
            }
            if(h<0)
            {
                return false;
            }
        }
        return l == 0;
    }
}
